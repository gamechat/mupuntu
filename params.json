{"name":"Mupuntu.JS","tagline":"Game Development on Gamechat","body":"# JAVASCRIPT GAME DEVELOPMENT FRAMEWORK #\r\n\r\n## GAMECHAT ##\r\nThe gamechat App provides a peer-to-peer instant gaming and chat experience on the Android OS.\r\n\r\nit extends existing instant mobile messaging apps, giving them gaming capability. Users challenge or invite their friends on Whatsapp, etc as well as their contact list to play games (Just like old times).\r\n\r\n## MUPUNTU.JS - HOW IT WORKS ##\r\nThe Mupuntu.js Framework takes care of all peer-to-peer connections (networking) including data storage, data exchange, user authentication and management, while letting developers concentrate their forces on their game logic. This makes porting an existing HTML5 a breeze and creating new games an exciting adventure. Mupuntu.js Framework does not impose any HTML5 javascript game library. Developers can import any javascript framework they like including stylesheets (CSS) and without restriction whatsoever.\r\n\r\nMupuntu.js focuses on the following objectives:\r\n\r\n* Port existing HTML5 games to the gamechat platform in less than an hour\r\n* To bring two-players HTML5 games to the hands of thousands of users worldwide\r\n* Reward HTML5 game developers.\r\n\r\nYou can import any powerful javascript library you want.\r\n\r\nLastly, No server-side coding. We do believe you can develop games without it!\r\n\r\n## GAME LIFE CYCLE ##\r\n\r\nEvery living thing has a life cycle. As for the humans, they are born, grow and then die. Since apps are created in a man's image they do too. If you have created any apps with j2me or android you have seen that every app as a life cycle and the mupun framework is not an exception. \r\n\r\nThere are basically four (4) methods to override or drop your code into and voila! your game is done.\r\n\r\n* Init()\r\n* sleep()\r\n* wake()\r\n* die()\r\n\r\n```javascript\r\n/* \r\n* @Author \t\tDaser Retnan <dretnan@acm.org> \r\n* @Date \t\tThu 10 August 2014 08:50:32 PM GMT \r\n* @Description: \tMy Game Logic \r\n*/ \r\nGAMECHAT.GAME.createGamePlay(\"APPID-8495372645\", { \r\n\r\n\t/* \r\n\t* @Method init\r\n\t* @Description init hook [Compulsory] \r\n\t*\tInitialize, Bootstrap and create your game here\r\n\t*/ \r\n\tinit : function(){ \r\n\t\t \r\n\t}, \r\n\r\n\t/* \r\n\t* @Method \t\tsleep \r\n\t* @Description \tThe sleep hook [Compulsory] \r\n\t*\tThis method is called when user navigates away from the display \r\n\t*/ \r\n\t \r\n\tsleep : function (){ \r\n\t\t \r\n\t}, \r\n\r\n\t/* \r\n\t* @Method \t\twake \r\n\t* @Description \tThe wake hook [Compulsory] \r\n\t*\tThis method is called when user navigates back to the game screen \r\n\t*/ \r\n\t \r\n\twake : function (){ \r\n\r\n\t}, \r\n\t\r\n\t/* \r\n\t* @Method \t\tdie \r\n\t* @Description \tThe die hook [Compulsory] \r\n\t*\tThis method is called when user exits the app \r\n\t*/ \r\n\t \r\n\tdie : function (){ \r\n\r\n\t}, \r\n\r\n});\r\n```\r\n\r\n## MUPUNTU.JS API ##\r\n\r\n# Display Size #\r\nGet the entire available drawable width of the screen\r\n```javascript\r\nthis.getScreen().getWidth();\r\n```\r\nGet the entire available drawable height of the screen\r\n```javascript\r\nthis.getScreen().getHeight();\r\n```\r\n\r\n# Game Player's Info #\r\nGet the Local User Object\r\n```javascript\r\nvar uObject = this.getLocalUser();\r\nconsole.log(uObject.displayName);\r\nconsole.log(uObject.playerID);\r\n```\r\n\r\nget the Remote User Object\r\n```javascript\r\nvar ruObject = this.getRemoteUser();\r\nconsole.log(ruObject.displayName);\r\nconsole.log(ruObject.playerID);\r\n```\r\n\r\n# Database Support #\r\nProvides database support. local and remote model syncing. Gamechat provides two data storages: the gamestate object for saving gamestates and the scoreboard object for storing scores, leaderboard and some useful game configurations. The gamestate and scoreboard object is passed as a single parameters to the provided callback. \r\n\r\n```javascript\r\n// this.getModels(callback, context);\r\nthis.getModels(function(gamedata){\r\n\t_gamestateModel = gamedata.gamestate;\r\n\t_scoreboardModel = gamedata.scoreboard;\r\n}, this);\r\n```\r\n\r\n### Two Available Data Storage ###\r\n* The gamestate object – should be used for storing your game state\r\n* The scoreboard object – should be used for storing your game configurations, scores or global states that persists across updates and uninstallations.\r\n\r\n### How to store Data in the database ###\r\nYou can store key value pair (json or javascript objects)\r\n\r\n```javascript\r\n_gamestateModel.set('turn', {player: “XXXXXX”});\r\n_scoreboardModel.set('totalgames', 0);\r\n```\r\n\r\nYou can store javascript or json objects in the database\r\n```javascript\r\nvar gamemove = {}; \r\ngamemove.gameboard = {}; \r\ngamemove.gameboard[position] = {}; \r\ngamemove.gameboard[position].status = true; \r\ngamemove.gameboard[position].player = playerId;\r\n\r\n_gamestateModel.set(gamemove);\r\n```\r\n\r\n\r\n## How to listen for changes in the state of the model ##\r\nYou can register listeners on any parameters that change in the model as follows:\r\n```javascript\r\n_gamestateModel.onChangeEventListener(“gameboard.turn”,callback, context);\r\n\r\n_gamestateModel.onChangeEventListener(“gameboard.moves”,callback,\r\ncontext);\r\n```\r\n\r\n## How to remove the default splash screen ##\r\n```javascript\r\nthis.removeSplash();\r\n```\r\n\r\n## How to get the database ##\r\nthis.getGamestateModel() returns the gamestate object or returns undefined if it's not available. It is recommended to use  getModels method when you are not sure if it's available or not.\r\n\r\n```javascript\r\n_gamestateModel = this.getGamestateModel();\r\n```\r\n\r\nthis.getScoreboardModel() - returns the scoreboard object or returns undefined if it's not available. It is recommended to use getModels method when you are not sure if it's available or not.\r\n\r\n```javascript\r\n_scoreboardModel = this.getScoreboardModel();\r\n```\r\n\r\n## How to know when user goes offline and offline ##\r\n\r\nThis enables us to write real-time games, where the presence of the participants is crucial to play the game.\r\nthis.addEventListener(eventType, callback)\r\n\r\neventTypes: “gc:user-offline” or “gc:user-online”\r\n\r\ncallback: method to call when the event occurs\r\n\r\n```javascript\r\nthis.addEventListener(\"gc:user-online\", function(){\r\n\tconsole.log(\"local user is back online\");\r\n});\r\nthis.addEventListener(\"gc:user-offline\", function(){\r\n\tconsole.log(\"local user has gone offline\");\r\n});\r\nthis.addEventListener(\"gc:remote-online\", function(){\r\n\tconsole.log(\"remote user is back online\");\r\n});\r\nthis.addEventListener(\"gc:remote-offline\", function(){\r\n\tconsole.log(\"remote user has gone offline\");\r\n});\r\n```\r\n\r\nYou can stop listening anytime with this.removeEventListener(eventType)\r\n\r\n```javascript\r\n// These unsubscribes to the two subscribed events\r\nthis.removeEventListener(\"gc:user-online\");\r\nthis.removeEventListener(\"gc:user-offline\");\r\n```\r\n\r\n## How to create a custom Event ##\r\nCustom event allows you to trigger events from a local user to be caught by the remote user. \r\n\r\nA custom event is a mechanism that allow communication between the two users playing the game directly events triggered or sent here are fired on the remote device. \r\n\r\nThe event sent from the local is not fired on the local device. This means you can create a game absolutely \twithout needing to store gamestate, but keeping state is recommended so as to resume games that was left unfinished.\r\n\r\n* this.triggerEvent(eventType, data)\r\n\r\neventType is the event name to fire (excluding the 'triggerer')\r\n\r\ndata is the data to send along which is received by the callback\r\n\r\n```javascript\r\nthis.triggerEvent(\"reset-game\", true);\r\n```\r\n\r\n* this.listenTo(eventType, callback, context)\r\n\r\neventType: an abitrary event to subscribe for\r\n\r\n```javascript\r\nthis.listenTo(\"reset-game\", function(data){\r\n\tconsole.log(\"We got an event fired by a remote device:\");\r\n\tconsole.log(\"remote device said: \" + data);\r\n} this);\r\n```\r\n\r\n* this.stopListeningTo(eventType)\r\n\r\neventType is the eventType to unsubscribe\r\n\r\n```javascript\r\nthis.stopListeningTo(\"reset-game\");\r\n```\r\n\r\n## PREINSTALLED JAVASCRIPT LIBRARIES ##\r\nGamechat uses the following libraries internally and can be used by developers as well without doing anything extra.\r\n\r\n* Jquery.js, \r\n* Underscore.js and\r\n* Backbone.js\r\n\r\n## SAMPLES ##\r\nFind simple games developed with the mupuntujs framework:\r\n* [Tic Tac Toe - Colorful](https://github.com/gamechat/mupuntu-games/tree/master/APPID-9381989197)\r\n* [2-Player Word Puzzle](https://github.com/gamechat/mupuntu-games/tree/master/APPID-3119528364)\r\n* [King Solomon's Treasure Hunt](https://github.com/gamechat/mupuntu-games/tree/master/APPID-4284334177)\r\n\r\n## WEB IDE ##\r\nThe web Integrated Development Environment (IDE) simplifies the development of games, it also include an emulator.\r\n\r\nSince gamechat is a two-player game platform, there are two players emulations named as Alice and Bob\r\n\r\n* [Mupuntu.JS Web IDE](http://mupuntu.com)\r\n\r\n## Android Emulator ##\r\nNothing is as good as Developing and Testing your game on a real device. Update your code on the mupuntu.com website, then see it in action on your device.\r\n\r\n* [Download Android Emulator](https://play.google.com/apps/testing/com.mupuntu.gamechat)","google":"UA-61477751-1","note":"Don't delete this file! It's used internally to help with page regeneration."}